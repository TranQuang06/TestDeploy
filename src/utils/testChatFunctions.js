import { chatService } from "./chatService.js";

// Test functions ƒë·ªÉ ki·ªÉm tra ch·ª©c nƒÉng chat
export const testChatFunctions = {
  // Test 1: T·∫°o sample users
  async createSampleUsers() {
    console.log("üöÄ Creating sample users...");

    const users = [
      {
        id: "user1",
        firstName: "Nguy·ªÖn",
        surname: "VƒÉn An",
        email: "nguyenvanan@example.com",
        avatar:
          "https://ui-avatars.com/api/?name=Nguyen+Van+An&background=0ea5e9&color=fff&size=100",
      },
      {
        id: "user2",
        firstName: "Tr·∫ßn",
        surname: "Th·ªã B√¨nh",
        email: "tranthibinh@example.com",
        avatar:
          "https://ui-avatars.com/api/?name=Tran+Thi+Binh&background=10b981&color=fff&size=100",
      },
      {
        id: "user3",
        firstName: "L√™",
        surname: "Ho√†ng C∆∞·ªùng",
        email: "lehoangcuong@example.com",
        avatar:
          "https://ui-avatars.com/api/?name=Le+Hoang+Cuong&background=f59e0b&color=fff&size=100",
      },
    ];

    for (const user of users) {
      try {
        await chatService.createUser(user.id, user);
        console.log(`‚úÖ Created user: ${user.firstName} ${user.surname}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è User ${user.id} might already exist:`, error.message);
      }
    }

    return users;
  },

  // Test 2: T·∫°o chats gi·ªØa current user v√† sample users
  async createSampleChats(currentUserId) {
    if (!currentUserId) {
      console.error("‚ùå Current user ID is required");
      return;
    }

    console.log("üí¨ Creating sample chats for user:", currentUserId);

    const otherUserIds = ["user1", "user2", "user3"];
    const chats = [];

    for (const otherUserId of otherUserIds) {
      try {
        const chat = await chatService.getOrCreateChat(
          currentUserId,
          otherUserId
        );
        chats.push(chat);
        console.log(
          `‚úÖ Created/found chat between ${currentUserId} and ${otherUserId}`
        );
      } catch (error) {
        console.error(`‚ùå Error creating chat with ${otherUserId}:`, error);
      }
    }

    return chats;
  },

  // Test 3: G·ª≠i sample messages
  async sendSampleMessages(currentUserId) {
    if (!currentUserId) {
      console.error("‚ùå Current user ID is required");
      return;
    }

    console.log("üì® Sending sample messages...");

    const chats = await this.createSampleChats(currentUserId);

    const sampleMessages = [
      "Xin ch√†o! B·∫°n c√≥ kh·ªèe kh√¥ng?",
      "D·∫°o n√†y c√¥ng vi·ªác th·∫ø n√†o?",
      "Cu·ªëi tu·∫ßn n√†y r·∫£nh kh√¥ng?",
      "M√¨nh g·ª≠i b·∫°n t√†i li·ªáu n√†y nh√©",
      "C·∫£m ∆°n b·∫°n r·∫•t nhi·ªÅu!",
    ];

    for (let i = 0; i < chats.length; i++) {
      const chat = chats[i];
      const otherUserId = chat.participants.find((id) => id !== currentUserId);

      // G·ª≠i v√†i tin nh·∫Øn t·ª´ current user
      for (let j = 0; j < 2; j++) {
        const message =
          sampleMessages[Math.floor(Math.random() * sampleMessages.length)];
        await chatService.sendMessage(chat.id, currentUserId, message);

        // Delay nh·ªè
        await new Promise((resolve) => setTimeout(resolve, 500));
      }

      // G·ª≠i reply t·ª´ user kh√°c
      const replyMessage =
        sampleMessages[Math.floor(Math.random() * sampleMessages.length)];
      await chatService.sendMessage(chat.id, otherUserId, replyMessage);

      console.log(`‚úÖ Sent messages to chat with user ${otherUserId}`);

      // Delay gi·ªØa c√°c chat
      await new Promise((resolve) => setTimeout(resolve, 1000));
    }
  },
  // Test 4: T·∫°o friendships
  async createSampleFriendships(currentUserId) {
    if (!currentUserId) {
      console.error("‚ùå Current user ID is required");
      return;
    }

    console.log("üë• Creating sample friendships...");

    const friendIds = ["user1", "user2", "user3"];

    for (const friendId of friendIds) {
      try {
        await chatService.createFriendship(currentUserId, friendId);
        console.log(
          `ü§ù Created friendship between ${currentUserId} and ${friendId}`
        );
      } catch (error) {
        console.log(
          `‚ö†Ô∏è Friendship might already exist between ${currentUserId} and ${friendId}`
        );
      }
    }
  },

  // Test 5: Cleanup test data
  async cleanupTestData() {
    console.log("üßπ Cleaning up test data...");
    console.log(
      "‚ö†Ô∏è Cleanup not implemented yet - you may need to manually delete test data"
    );
  },

  // Test t·ªïng h·ª£p
  async runFullTest(currentUserId) {
    if (!currentUserId) {
      console.error("‚ùå Please provide current user ID");
      console.log('Example: testChatFunctions.runFullTest("your-user-id")');
      return;
    }

    console.log("üéØ Running full chat test for user:", currentUserId);

    try {
      await this.createSampleUsers();
      await this.createSampleChats(currentUserId);
      await this.sendSampleMessages(currentUserId);
      await this.createSampleFriendships(currentUserId);

      console.log("üéâ Full test completed successfully!");
      console.log("üí° Now you can check the chat interface to see the results");
    } catch (error) {
      console.error("‚ùå Test failed:", error);
    }
  },
};

// Export ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng t·ª´ browser console
if (typeof window !== "undefined") {
  window.testChatFunctions = testChatFunctions;

  // Helper function cho d·ªÖ s·ª≠ d·ª•ng
  window.testChat = (userId) => {
    return testChatFunctions.runFullTest(userId);
  };

  console.log("üîß Chat test functions loaded!");
  console.log(
    'Usage: testChat("your-user-id") or testChatFunctions.runFullTest("your-user-id")'
  );
}
